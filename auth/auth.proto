syntax = "proto3";

option go_package = "github.com/andrei-kozel/gladiator-arena-proto/golang/auth";

package auth;

import "google/protobuf/timestamp.proto";

// User related messages
message TwitchUserInfo {
  string twitch_id = 1;
  string login = 2;
  string display_name = 3;
  string email = 4;
  string profile_image_url = 5;
  string type = 6;
  google.protobuf.Timestamp created_at = 7;
  bool is_broadcaster = 8;
}

message LoginResponse {
  string user_id = 1;
  string username = 2;
  string session_token = 3;
  string refresh_token = 4;
  int32 expires_in = 5;
  TwitchUserInfo twitch_info = 6;
  google.protobuf.Timestamp issued_at = 7;
  repeated string scopes = 8;
}

message LoginRequest {
  string code = 1;
  string state = 2;
}

// Session management
message VerifySessionRequest {
  string session_token = 1;
}

message VerifySessionResponse {
  bool valid = 1;
  string user_id = 2;
  repeated string scopes = 3;
  google.protobuf.Timestamp expires_at = 4;
}

message RefreshSessionRequest {
  string refresh_token = 1;
}

message RefreshSessionResponse {
  string session_token = 1;
  string refresh_token = 2;
  int32 expires_in = 3;
  google.protobuf.Timestamp issued_at = 4;
}

// Logout
message LogoutRequest {
  string session_token = 1;
}

message LogoutResponse {
  bool success = 1;
}

// Token revocation
message RevokeTokenRequest {
  string token = 1;
  TokenType token_type = 2;
}

message RevokeTokenResponse {
  bool success = 1;
}

// Create session for internal service-to-service auth
message CreateSessionRequest {
  string user_id = 1;
  string username = 2;
  int32 expires_in = 3;
  repeated string scopes = 4;
}

message CreateSessionResponse {
  string token = 1;
  int32 expires_in = 2;
  google.protobuf.Timestamp issued_at = 3;
}

// Enums
enum TokenType {
  TOKEN_TYPE_UNSPECIFIED = 0;
  TOKEN_TYPE_ACCESS = 1;
  TOKEN_TYPE_REFRESH = 2;
}

// Service definition
service AuthService {
  // Authentication
  rpc Login(LoginRequest) returns (LoginResponse);
  
  // Session management
  rpc VerifySession(VerifySessionRequest) returns (VerifySessionResponse);
  rpc RefreshSession(RefreshSessionRequest) returns (RefreshSessionResponse);
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  
  // Token management
  rpc RevokeToken(RevokeTokenRequest) returns (RevokeTokenResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
}