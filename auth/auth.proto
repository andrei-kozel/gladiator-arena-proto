syntax = "proto3";

package auth;

option go_package = "github.com/andrei-kozel/gladiator-arena-proto/golang/auth";

import "google/protobuf/timestamp.proto";

enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_INVALID_SESSION = 1;
  ERROR_CODE_SESSION_EXPIRED = 2;
  ERROR_CODE_UNAUTHORIZED = 3;
  ERROR_CODE_INTERNAL = 4;
}

message Error {
  ErrorCode code = 1;
  string message = 2;
  map<string, string> metadata = 3;
}

message SessionInfo {
  string session_id = 1;
  string user_id = 2;
  string session_token = 3;
}

// Login
message LoginResponse {
  string user_id = 1;
  string username = 2;
  string session_token = 3;
  string refresh_token = 4;
  int32 expires_in = 5;
  google.protobuf.Timestamp issued_at = 6;
  repeated string scopes = 7;
}

message LoginRequest {
  string code = 1;
  string state = 2;
}

// create session
message CreateSessionRequest {
  string user_id = 1;
  string twitch_access_token = 2;
  string twitch_refresh_token = 3;
  int32 expires_in = 4;
  repeated string scopes = 5;
}

message CreateSessionResponse {
  oneof result {
    SessionInfo session = 1;
    Error error = 2;
  }
}

// Logout
message LogoutRequest {
  string session_token = 1;
}

message LogoutResponse {
  oneof result {
    bool success = 1;
    Error error = 2;
  }
}

// Token revocation
message RevokeTokenRequest {
  string session_token = 1;
  TokenType token_type = 2;
}

message RevokeTokenResponse {
  oneof result {
    bool success = 1;
    Error error = 2;
  }
}

// Token refresh
message RefreshSessionRequest {
  string session_token = 1;
}

message RefreshSessionResponse {
  oneof result {
    SessionInfo session = 1;
    Error error = 2;
  }
}

// Verify session
message VerifySessionRequest {
  string session_token = 1;
}

message VerifySessionResponse {
  oneof result {
    SessionInfo session = 1;
    Error error = 2;
  }
}

service AuthService {
  // Authentication
  rpc Login(LoginRequest) returns (LoginResponse);
  
  // Session management
  rpc VerifySession(VerifySessionRequest) returns (VerifySessionResponse);
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc RefreshSession(RefreshSessionRequest) returns (RefreshSessionResponse);
  
  // Token management
  rpc RevokeToken(RevokeTokenRequest) returns (RevokeTokenResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
}